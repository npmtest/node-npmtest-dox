{"/home/travis/build/npmtest/node-npmtest-dox/test.js":"/* istanbul instrument in package npmtest_dox */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-dox/lib.npmtest_dox.js":"/* istanbul instrument in package npmtest_dox */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_dox = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_dox = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-dox/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-dox && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_dox */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_dox\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_dox.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_dox.rollup.js'] =\n            local.assetsDict['/assets.npmtest_dox.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_dox.__dirname + '/lib.npmtest_dox.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-dox/node_modules/dox/index.js":"\nmodule.exports = require('./lib/dox');","/home/travis/build/npmtest/node-npmtest-dox/node_modules/dox/lib/dox.js":"/*!\n * Module dependencies.\n */\n\nvar markdown = require('markdown-it')({\n  html: true,\n  xhtmlOut: true,\n  breaks: true,\n  langPrefix: 'lang-'\n});\n\n/**\n * Expose api.\n */\n\nexports.api = require('./api');\n\n/**\n * Parse comments in the given string of `js`.\n *\n * @param {String} js\n * @param {Object} options\n * @return {Array}\n * @see exports.parseComment\n * @api public\n */\n\nexports.parseComments = function(js, options){\n  options = options || {};\n  js = js.replace(/\\r\\n/gm, '\\n');\n\n  var comments = []\n    , skipSingleStar = options.skipSingleStar\n    , comment\n    , buf = ''\n    , ignore\n    , withinMultiline = false\n    , withinSingle = false\n    , withinString = false\n    , code\n    , linterPrefixes = options.skipPrefixes || ['jslint', 'jshint', 'eshint']\n    , skipPattern = new RegExp('^' + (options.raw ? '' : '<p>') + '('+ linterPrefixes.join('|') + ')')\n    , lineNum = 1\n    , lineNumStarting = 1\n    , parentContext\n    , withinEscapeChar\n    , currentStringQuoteChar;\n\n\n  for (var i = 0, len = js.length; i < len; ++i) {\n    withinEscapeChar = withinString && !withinEscapeChar && js[i - 1] == '\\\\';\n\n    // start comment\n    if (!withinMultiline && !withinSingle && !withinString &&\n        '/' == js[i] && '*' == js[i+1] && (!skipSingleStar || js[i+2] == '*')) {\n      lineNumStarting = lineNum;\n      // code following the last comment\n      if (buf.trim().length) {\n        comment = comments[comments.length - 1];\n        if(comment) {\n          // Adjust codeStart for any vertical space between comment and code\n          comment.codeStart += buf.match(/^(\\s*)/)[0].split('\\n').length - 1;\n          comment.code = code = exports.trimIndentation(buf).trim();\n          comment.ctx = exports.parseCodeContext(code, parentContext);\n\n          if (comment.isConstructor && comment.ctx){\n              comment.ctx.type = \"constructor\";\n          }\n\n          // starting a new namespace\n          if (comment.ctx && (comment.ctx.type === 'prototype' || comment.ctx.type === 'class')){\n            parentContext = comment.ctx;\n          }\n          // reasons to clear the namespace\n          // new property/method in a different constructor\n          else if (!parentContext || !comment.ctx || !comment.ctx.constructor || !parentContext.constructor || parentContext.constructor !== comment.ctx.constructor){\n            parentContext = null;\n          }\n        }\n        buf = '';\n      }\n      i += 2;\n      withinMultiline = true;\n      ignore = '!' == js[i];\n\n      // if the current character isn't whitespace and isn't an ignored comment,\n      // back up one character so we don't clip the contents\n      if (' ' !== js[i] && '\\n' !== js[i] && '\\t' !== js[i] && '!' !== js[i]) i--;\n\n    // end comment\n    } else if (withinMultiline && !withinSingle && '*' == js[i] && '/' == js[i+1]) {\n      i += 2;\n      buf = buf.replace(/^[ \\t]*\\* ?/gm, '');\n      comment = exports.parseComment(buf, options);\n      comment.ignore = ignore;\n      comment.line = lineNumStarting;\n      comment.codeStart = lineNum + 1;\n      if (!comment.description.full.match(skipPattern)) {\n        comments.push(comment);\n      }\n      withinMultiline = ignore = false;\n      buf = '';\n    } else if (!withinSingle && !withinMultiline && !withinString && '/' == js[i] && '/' == js[i+1]) {\n      withinSingle = true;\n      buf += js[i];\n    } else if (withinSingle && !withinMultiline && '\\n' == js[i]) {\n      withinSingle = false;\n      buf += js[i];\n    } else if (!withinSingle && !withinMultiline && !withinEscapeChar && ('\\'' == js[i] || '\"' == js[i] || '`' == js[i])) {\n      if(withinString) {\n        if(js[i] == currentStringQuoteChar) {\n          withinString = false;\n        }\n      } else {\n        withinString = true;\n        currentStringQuoteChar = js[i];\n      }\n\n      buf += js[i];\n    } else {\n      buf += js[i];\n    }\n\n    if('\\n' == js[i]) {\n      lineNum++;\n    }\n\n  }\n\n  if (comments.length === 0) {\n    comments.push({\n      tags: [],\n      description: {full: '', summary: '', body: ''},\n      isPrivate: false,\n      isConstructor: false,\n      line: lineNumStarting\n    });\n  }\n\n  // trailing code\n  if (buf.trim().length) {\n    comment = comments[comments.length - 1];\n    // Adjust codeStart for any vertical space between comment and code\n    comment.codeStart += buf.match(/^(\\s*)/)[0].split('\\n').length - 1;\n    comment.code = code = exports.trimIndentation(buf).trim();\n    comment.ctx = exports.parseCodeContext(code, parentContext);\n  }\n\n  return comments;\n};\n\n/**\n * Removes excess indentation from string of code.\n *\n * @param {String} str\n * @return {String}\n * @api public\n */\n\nexports.trimIndentation = function (str) {\n  // Find indentation from first line of code.\n  var indent = str.match(/(?:^|\\n)([ \\t]*)[^\\s]/);\n  if (indent) {\n    // Replace indentation on all lines.\n    str = str.replace(new RegExp('(^|\\n)' + indent[1], 'g'), '$1');\n  }\n  return str;\n};\n\n/**\n * Parse the given comment `str`.\n *\n * The comment object returned contains the following\n *\n *  - `tags`  array of tag objects\n *  - `description` the first line of the comment\n *  - `body` lines following the description\n *  - `content` both the description and the body\n *  - `isPrivate` true when \"@api private\" is used\n *\n * @param {String} str\n * @param {Object} options\n * @return {Object}\n * @see exports.parseTag\n * @api public\n */\n\nexports.parseComment = function(str, options) {\n  str = str.trim();\n  options = options || {};\n\n  var comment = { tags: [] }\n    , raw = options.raw\n    , description = {}\n    , tags = str.split(/\\n\\s*@/);\n\n  // A comment has no description\n  if (tags[0].charAt(0) === '@') {\n    tags.unshift('');\n  }\n\n  // parse comment body\n  description.full = tags[0];\n  description.summary = description.full.split('\\n\\n')[0];\n  description.body = description.full.split('\\n\\n').slice(1).join('\\n\\n');\n  comment.description = description;\n\n  // parse tags\n  if (tags.length) {\n    comment.tags = tags.slice(1).map(exports.parseTag);\n    comment.isPrivate = comment.tags.some(function(tag){\n      return 'private' == tag.visibility;\n    });\n    comment.isConstructor = comment.tags.some(function(tag){\n      return 'constructor' == tag.type || 'augments' == tag.type;\n    });\n    comment.isClass = comment.tags.some(function(tag){\n      return 'class' == tag.type;\n    });\n    comment.isEvent = comment.tags.some(function(tag){\n      return 'event' == tag.type;\n    });\n\n    if (!description.full || !description.full.trim()) {\n      comment.tags.some(function(tag){\n        if ('description' == tag.type) {\n          description.full = tag.full;\n          description.summary = tag.summary;\n          description.body = tag.body;\n          return true;\n        }\n      });\n    }\n  }\n\n  // markdown\n  if (!raw) {\n    description.full = markdown.render(description.full).trim();\n    description.summary = markdown.render(description.summary).trim();\n    description.body = markdown.render(description.body).trim();\n    comment.tags.forEach(function (tag) {\n      if (tag.description) tag.description = markdown.render(tag.description).trim();\n      else tag.html = markdown.render(tag.string).trim();\n    });\n  }\n\n  return comment;\n};\n\n//TODO: Find a smarter way to do this\n/**\n * Extracts different parts of a tag by splitting string into pieces separated by whitespace. If the white spaces are\n * somewhere between curly braces (which is used to indicate param/return type in JSDoc) they will not be used to split\n * the string. This allows to specify jsdoc tags without the need to eliminate all white spaces i.e. {number | string}\n *\n * @param str The tag line as a string that needs to be split into parts\n * @returns {Array.<string>} An array of strings containing the parts\n */\n\nexports.extractTagParts = function(str) {\n  var level = 0,\n    extract = '',\n    split = [];\n\n  str.split('').forEach(function(c) {\n    if(c.match(/\\s/) && level === 0) {\n      split.push(extract);\n      extract = '';\n    } else {\n      if(c === '{') {\n        level++;\n      } else if (c === '}') {\n        level--;\n      }\n\n      extract += c;\n    }\n  });\n\n  split.push(extract);\n  return split.filter(function(str) {\n    return str.length > 0;\n  });\n};\n\n\n/**\n * Parse tag string \"@param {Array} name description\" etc.\n *\n * @param {String}\n * @return {Object}\n * @api public\n */\n\nexports.parseTag = function(str) {\n  var tag = {}\n    , lines = str.split('\\n')\n    , parts = exports.extractTagParts(lines[0])\n    , type = tag.type = parts.shift().replace('@', '')\n    , matchType = new RegExp('^@?' + type + ' *')\n    , matchTypeStr = /^\\{.+\\}$/;\n\n  tag.string = str.replace(matchType, '');\n\n  if (lines.length > 1) {\n    parts.push(lines.slice(1).join('\\n'));\n  }\n\n  switch (type) {\n    case 'property':\n    case 'template':\n    case 'param':\n      var typeString = matchTypeStr.test(parts[0]) ? parts.shift() : \"\";\n      tag.name = parts.shift() || '';\n      tag.description = parts.join(' ');\n      exports.parseTagTypes(typeString, tag);\n      break;\n    case 'define':\n    case 'return':\n    case 'returns':\n      var typeString = matchTypeStr.test(parts[0]) ? parts.shift() : \"\";\n      exports.parseTagTypes(typeString, tag);\n      tag.description = parts.join(' ');\n      break;\n    case 'see':\n      if (~str.indexOf('http')) {\n        tag.title = parts.length > 1\n          ? parts.shift()\n          : '';\n        tag.url = parts.join(' ');\n      } else {\n        tag.local = parts.join(' ');\n      }\n      break;\n    case 'api':\n      tag.visibility = parts.shift();\n      break;\n    case 'public':\n    case 'private':\n    case 'protected':\n      tag.visibility = type;\n      break;\n    case 'enum':\n    case 'typedef':\n    case 'type':\n      exports.parseTagTypes(parts.shift(), tag);\n      break;\n    case 'lends':\n    case 'memberOf':\n      tag.parent = parts.shift();\n      break;\n    case 'extends':\n    case 'implements':\n    case 'augments':\n      tag.otherClass = parts.shift();\n      break;\n    case 'borrows':\n      tag.otherMemberName = parts.join(' ').split(' as ')[0];\n      tag.thisMemberName = parts.join(' ').split(' as ')[1];\n      break;\n    case 'throws':\n      var typeString = matchTypeStr.test(parts[0]) ? parts.shift() : \"\";\n      tag.types = exports.parseTagTypes(typeString);\n      tag.description = parts.join(' ');\n      break;\n    case 'description':\n      tag.full = parts.join(' ').trim();\n      tag.summary = tag.full.split('\\n\\n')[0];\n      tag.body = tag.full.split('\\n\\n').slice(1).join('\\n\\n');\n      break;\n    default:\n      tag.string = parts.join(' ').replace(/\\s+$/, '');\n      break;\n  }\n\n  return tag;\n};\n\n/**\n * Parse tag type string \"{Array|Object}\" etc.\n * This function also supports complex type descriptors like in jsDoc or even the enhanced syntax used by the\n * [google closure compiler](https://developers.google.com/closure/compiler/docs/js-for-compiler#types)\n *\n * The resulting array from the type descriptor `{number|string|{name:string,age:number|date}}` would look like this:\n *\n *     [\n *       'number',\n *       'string',\n *       {\n *         age: ['number', 'date'],\n *         name: ['string']\n *       }\n *     ]\n *\n * @param {String} str\n * @return {Array}\n * @api public\n */\n\nexports.parseTagTypes = function(str, tag) {\n  if (!str) {\n    if(tag) {\n      tag.types = [];\n      tag.typesDescription = \"\";\n      tag.optional = tag.nullable = tag.nonNullable = tag.variable = false;\n    }\n    return [];\n  }\n  var Parser = require('jsdoctypeparser').Parser;\n  var Builder = require('jsdoctypeparser').Builder;\n  var result = new Parser().parse(str.substr(1, str.length - 2));\n\n  var types = (function transform(type) {\n    if(type instanceof Builder.TypeUnion) {\n      return type.types.map(transform);\n    } else if(type instanceof Builder.TypeName) {\n      return type.name;\n    } else if(type instanceof Builder.RecordType) {\n      return type.entries.reduce(function(obj, entry) {\n        obj[entry.name] = transform(entry.typeUnion);\n        return obj;\n      }, {});\n    } else {\n      return type.toString();\n    }\n  }(result));\n\n  if(tag) {\n    tag.types = types;\n    tag.typesDescription = result.toHtml();\n    tag.optional = (tag.name && tag.name.slice(0,1) === '[') || result.optional;\n    tag.nullable = result.nullable;\n    tag.nonNullable = result.nonNullable;\n    tag.variable = result.variable;\n  }\n\n  return types;\n};\n\n/**\n * Determine if a parameter is optional.\n *\n * Examples:\n * JSDoc: {Type} [name]\n * Google: {Type=} name\n * TypeScript: {Type?} name\n *\n * @param {Object} tag\n * @return {Boolean}\n * @api public\n */\n\nexports.parseParamOptional = function(tag) {\n  var lastTypeChar = tag.types.slice(-1)[0].slice(-1);\n  return tag.name.slice(0,1) === '[' || lastTypeChar === '=' || lastTypeChar === '?';\n};\n\n/**\n * Parse the context from the given `str` of js.\n *\n * This method attempts to discover the context\n * for the comment based on it's code. Currently\n * supports:\n *\n *   - classes\n *   - class constructors\n *   - class methods\n *   - function statements\n *   - function expressions\n *   - prototype methods\n *   - prototype properties\n *   - methods\n *   - properties\n *   - declarations\n *\n * @param {String} str\n * @param {Object=} parentContext An indication if we are already in something. Like a namespace or an inline declaration.\n * @return {Object}\n * @api public\n */\n\nexports.parseCodeContext = function(str, parentContext) {\n  parentContext = parentContext || {};\n\n  var ctx;\n\n  // loop through all context matchers, returning the first successful match\n  return exports.contextPatternMatchers.some(function (matcher) {\n    return ctx = matcher(str, parentContext);\n  }) && ctx;\n};\n\nexports.contextPatternMatchers = [\n\n  function (str) {\n    // class, possibly exported by name or as a default\n    if (/^\\s*(export(\\s+default)?\\s+)?class\\s+([\\w$]+)(\\s+extends\\s+([\\w$.]+(?:\\(.*\\))?))?\\s*{/.exec(str)) {\n      return {\n          type: 'class'\n        , constructor: RegExp.$3\n        , cons: RegExp.$3\n        , name: RegExp.$3\n        , extends: RegExp.$5\n        , string: 'new ' + RegExp.$3 + '()'\n      };\n    }\n  },\n\n  function (str, parentContext) {\n    // class constructor\n    if (/^\\s*constructor\\s*\\(/.exec(str)) {\n      return {\n        type: 'constructor'\n        , constructor: parentContext.name\n        , cons: parentContext.name\n        , name: 'constructor'\n        , string: (parentContext && parentContext.name && parentContext.name + '.prototype.' || '') + 'constructor()'\n      };\n    // class method\n    }\n  },\n\n  function (str, parentContext) {\n    if (/^\\s*(static)?\\s*(\\*)?\\s*([\\w$]+|\\[.*\\])\\s*\\(/.exec(str)) {\n      return {\n        type: 'method'\n        , constructor: parentContext.name\n        , cons: parentContext.name\n        , name: RegExp.$2 + RegExp.$3\n        , string: (parentContext && parentContext.name && parentContext.name + (RegExp.$1 ? '.' : '.prototype.') || '') + RegExp.$2 + RegExp.$3 + '()'\n      };\n    // named function statement, possibly exported by name or as a default\n    }\n  },\n\n  function (str) {\n    if (/^\\s*(export(\\s+default)?\\s+)?function\\s+([\\w$]+)\\s*\\(/.exec(str)) {\n      return {\n          type: 'function'\n        , name: RegExp.$3\n        , string: RegExp.$3 + '()'\n      };\n    }\n  },\n\n  function (str) {\n    // anonymous function expression exported as a default\n    if (/^\\s*export\\s+default\\s+function\\s*\\(/.exec(str)) {\n      return {\n          type: 'function'\n        , name: RegExp.$1 // undefined\n        , string: RegExp.$1 + '()'\n      };\n    }\n  },\n\n  function (str) {\n    // function expression\n    if (/^return\\s+function(?:\\s+([\\w$]+))?\\s*\\(/.exec(str)) {\n      return {\n          type: 'function'\n        , name: RegExp.$1\n        , string: RegExp.$1 + '()'\n      };\n    }\n  },\n\n  function (str) {\n    // function expression\n    if (/^\\s*(?:const|let|var)\\s+([\\w$]+)\\s*=\\s*function/.exec(str)) {\n      return {\n          type: 'function'\n        , name: RegExp.$1\n        , string: RegExp.$1 + '()'\n      };\n    }\n  },\n\n  function (str, parentContext) {\n    // prototype method\n    if (/^\\s*([\\w$.]+)\\s*\\.\\s*prototype\\s*\\.\\s*([\\w$]+)\\s*=\\s*function/.exec(str)) {\n      return {\n          type: 'method'\n        , constructor: RegExp.$1\n        , cons: RegExp.$1\n        , name: RegExp.$2\n        , string: RegExp.$1 + '.prototype.' + RegExp.$2 + '()'\n      };\n    }\n  },\n\n  function (str) {\n    // prototype property\n    if (/^\\s*([\\w$.]+)\\s*\\.\\s*prototype\\s*\\.\\s*([\\w$]+)\\s*=\\s*([^\\n;]+)/.exec(str)) {\n      return {\n          type: 'property'\n        , constructor: RegExp.$1\n        , cons: RegExp.$1\n        , name: RegExp.$2\n        , value: RegExp.$3.trim()\n        , string: RegExp.$1 + '.prototype.' + RegExp.$2\n      };\n    }\n  },\n\n  function (str) {\n    // prototype property without assignment\n    if (/^\\s*([\\w$]+)\\s*\\.\\s*prototype\\s*\\.\\s*([\\w$]+)\\s*/.exec(str)) {\n      return {\n          type: 'property'\n        , constructor: RegExp.$1\n        , cons: RegExp.$1\n        , name: RegExp.$2\n        , string: RegExp.$1 + '.prototype.' + RegExp.$2\n      };\n    }\n  },\n\n  function (str) {\n    // inline prototype\n    if (/^\\s*([\\w$.]+)\\s*\\.\\s*prototype\\s*=\\s*{/.exec(str)) {\n      return {\n        type: 'prototype'\n        , constructor: RegExp.$1\n        , cons: RegExp.$1\n        , name: RegExp.$1\n        , string: RegExp.$1 + '.prototype'\n      };\n    }\n  },\n\n  function (str, parentContext) {\n    // inline method\n    if (/^\\s*([\\w$.]+)\\s*:\\s*function/.exec(str)) {\n      return {\n        type: 'method'\n        , constructor: parentContext.name\n        , cons: parentContext.name\n        , name: RegExp.$1\n        , string: (parentContext && parentContext.name && parentContext.name + '.prototype.' || '') + RegExp.$1 + '()'\n      };\n    }\n  },\n\n  function (str, parentContext) {\n    // inline property\n    if (/^\\s*([\\w$.]+)\\s*:\\s*([^\\n;]+)/.exec(str)) {\n      return {\n        type: 'property'\n        , constructor: parentContext.name\n        , cons: parentContext.name\n        , name: RegExp.$1\n        , value: RegExp.$2.trim()\n        , string: (parentContext && parentContext.name && parentContext.name + '.' || '') + RegExp.$1\n      };\n    }\n  },\n\n  function (str, parentContext) {\n    // inline getter/setter\n    if (/^\\s*(get|set)\\s*([\\w$.]+)\\s*\\(/.exec(str)) {\n      return {\n        type: 'property'\n        , constructor: parentContext.name\n        , cons: parentContext.name\n        , name: RegExp.$2\n        , string: (parentContext && parentContext.name && parentContext.name + '.prototype.' || '') + RegExp.$2\n      };\n    }\n  },\n\n  function (str) {\n    // method\n    if (/^\\s*([\\w$.]+)\\s*\\.\\s*([\\w$]+)\\s*=\\s*function/.exec(str)) {\n      return {\n          type: 'method'\n        , receiver: RegExp.$1\n        , name: RegExp.$2\n        , string: RegExp.$1 + '.' + RegExp.$2 + '()'\n      };\n    }\n  },\n\n  function (str) {\n    // property\n    if (/^\\s*([\\w$.]+)\\s*\\.\\s*([\\w$]+)\\s*=\\s*([^\\n;]+)/.exec(str)) {\n      return {\n          type: 'property'\n        , receiver: RegExp.$1\n        , name: RegExp.$2\n        , value: RegExp.$3.trim()\n        , string: RegExp.$1 + '.' + RegExp.$2\n      };\n    }\n  },\n\n  function (str) {\n    // declaration\n    if (/^\\s*(?:const|let|var)\\s+([\\w$]+)\\s*=\\s*([^\\n;]+)/.exec(str)) {\n      return {\n          type: 'declaration'\n        , name: RegExp.$1\n        , value: RegExp.$2.trim()\n        , string: RegExp.$1\n      };\n    }\n  }\n];\n","/home/travis/build/npmtest/node-npmtest-dox/node_modules/dox/lib/api.js":"\nmodule.exports = function(comments){\n  var buf = [];\n\n  comments.forEach(function(comment){\n    if (comment.isPrivate) return;\n    if (comment.ignore) return;\n    var ctx = comment.ctx;\n    var desc = comment.description;\n    if (!ctx) return;\n    if (~desc.full.indexOf('Module dependencies')) return;\n    if (!ctx.string.indexOf('module.exports')) return;\n    buf.push('### ' + context(comment));\n    buf.push('');\n    buf.push(desc.full.trim().replace(/^/gm, '  '));\n    buf.push('');\n  });\n\n  buf = buf\n    .join('\\n')\n    .replace(/^ *#/gm, '')\n\n  var code = buf.match(/^( {4}[^\\n]+\\n*)+/gm) || [];\n\n  code.forEach(function(block){\n    var code = block.replace(/^ {4}/gm, '');\n    buf = buf.replace(block, '```js\\n' + code.trimRight() + '\\n```\\n\\n');\n  });\n\n  return toc(buf) + '\\n\\n' + buf;\n};\n\nfunction toc(str) {\n  return headings(str).map(function(h){\n    var clean = h.title.replace(/\\(.*?\\)/, '()');\n    return '  - [' + clean + '](#' + slug(h.title) + ')';\n  }).join('\\n');\n}\n\nfunction slug(str) {\n  return str.replace(/\\W+/g, '').toLowerCase();\n}\n\nfunction headings(str) {\n  return (str.match(/^#+ *([^\\n]+)/gm) || []).map(function(str){\n    str = str.replace(/^(#+) */, '');\n    return {\n      title: str,\n      level: RegExp.$1.length\n    }\n  });\n}\n\nfunction context(comment) {\n  var ctx = comment.ctx;\n  var tags = comment.tags;\n\n  var alias = tags.map(function(tag) {\n    return tag.type === 'alias' && tag.string\n  }).filter(Boolean);\n\n  switch (ctx.type) {\n    case 'function':\n      var name = alias.pop() || ctx.name;\n      return name + '(' + params(tags) + ')'\n    case 'method':\n      var name = alias.pop() || (ctx.cons || ctx.receiver) + '.' + ctx.name;\n      return name + '(' + params(tags) + ')';\n    default:\n      return alias.pop() || ctx.string;\n  }\n}\n\nfunction params(tags) {\n  return tags.filter(function(tag){\n    return tag.type == 'param';\n  }).map(function(param){\n    return param.name + ':' + param.types.join('|');\n  }).join(', ');\n}\n","/home/travis/build/npmtest/node-npmtest-dox/node_modules/dox/lib/utils.js":"\n/**\n * Escape the given `html`.\n *\n * @param {String} html\n * @return {String}\n * @api private\n */\n\nexports.escape = function(html){\n  return String(html)\n    .replace(/&(?!\\w+;)/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;');\n};"}